components:
  schemas:
    Customer:
      properties:
        object:
          readOnly: true
          enum: ["customer"]
          type: string
        id:
          readOnly: true
          format: uuid
          type: string
        name:
          type: string
          example: "Example Co."
        website:
          type: string
          example: https://example.com
        plans:
          readOnly: true
          type: array
          items:
            type: string
            format: uuid
      required:
        - name
      type: object
    Plan:
      properties:
        object:
          readOnly: true
          enum: ["plan"]
          type: string
        id:
          readOnly: true
          format: uuid
          type: string
        name:
          readOnly: true
          type: string
          example: "Example Co. Onboarding"
        description:
          readOnly: true
          type: string
          example: "This onboarding will help Example Co. get up and running."
        url:
          readOnly: true
          type: string
          example: "https://app.arrows.to/plans/00000000"
        template:
          format: uuid
          type: string
        customer:
          format: uuid
          type: string
        point_person:
          readOnly: true
          format: uuid
          type: string
        coordinator:
          format: uuid
          type: string
      required:
        - customer
        - coordinator
        - template
      type: object
    Template:
      properties:
        object:
          readOnly: true
          enum: ["template"]
          type: string
        id:
          readOnly: true
          format: uuid
          type: string
        name:
          type: string
          example: "SMB Template"
      type: object
    Member:
      properties:
        object:
          readOnly: true
          enum: ["user"]
          type: string
        id:
          readOnly: true
          format: uuid
          type: string
        email:
          type: string
          example: "johnny@acme.com"
        name:
          type: string
          example: "Johnny Appleseed"
      type: object
    Event:
      properties:
        object:
          readOnly: true
          enum: ["event"]
          type: string
        id:
          readOnly: true
          format: uuid
          type: string
        created_at:
          readOnly: true
          format: date-time
          example: 1613765307
        type:
          enum: ["task.done", "phase.done"]
        data:
          type: object
          properties:
            object:
              oneOf:
                - $ref: '#/components/schemas/Task'
                - $ref: '#/components/schemas/Phase'
      type: object
    Task:
      properties:
        object:
          readOnly: true
          enum: ["task"]
          type: string
        id:
          readOnly: true
          format: uuid
          type: string
        name:
          format: string
          example: "Schedule onboarding call"
        description:
          format: string
          example: "This call is where we'll kick things off."
        status:
          enum: ["todo", "doing", "done"]
        template_object_id:
          type: string
          format: uuid
        plan:
          type: string
          format: uuid
        customer:
          type: string
          format: uuid
      type: object
    Phase:
      properties:
        object:
          readOnly: true
          enum: ["phase"]
          type: string
        id:
          readOnly: true
          format: uuid
          type: string
        name:
          format: string
          example: "Kickoff"
        description:
          format: string
          example: "The first phase of getting onboarded."
        plan:
          type: string
          format: uuid
        customer:
          type: string
          format: uuid
      type: object
info:
  description: "# Introduction

    Welcome to the Arrows API documentation! Our goal with this API is to make
    Arrows as useful as possible by letting you access, integrate, and modify
    your Arrows data.

    The quickest and easiest way to interact with the API is via the official
    Zapier integration which you can find
    [here](https://zapier.com/developer/public-invite/123347/1e96fa087e866d14304202fe2d96be40/)

    # Authentication

    In order to access the Arrows API you'll have to pass in your API Key. You
    can find your API Key at
    [https://app.arrows.to/organization#api](http://app.arrows.to/organization#api).

    Pass in your API key via an HTTP header with the following format:

    ```

    Authorization: Token 4rr0w54rr0w54rr0w54rr0w54rr0w54l

    ```

    Where `4rr0w54rr0w54rr0w54rr0w54rr0w54l` would be replaced with your API key.

    For example, a cURL request to retrieve your templates would look like this:

    ```

    curl -H \"Authorization: Token 4rr0w54rr0w54rr0w54rr0w54rr0w54l\" https://api.arrows.to/v1/templates

    ```
  "
  title: Arrows
  version: 0.1.0
openapi: 3.0.2
paths:
  /v1/customers/{id}:
    get:
      operationId: Retrieve Customer
      parameters:
        - description: The UUID identifying this customer.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
      tags:
        - Customers
  /v1/customers:
    post:
      operationId: Create Customer
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
      tags:
        - Customers
  /v1/plans:
    post:
      operationId: Create Plan
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Plan'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plan'
      tags:
        - Plans
  /v1/templates:
    get:
      operationId: List Templates
      parameters:
        - name: name
          description: "Filter by name of plan."
          in: query
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  object:
                    enum: ["list"]
                    type: string
                  url: 
                    enum: ["/v1/templates"]
                    type: string
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Template'
      tags:
        - Templates
  /v1/members:
    get:
      operationId: List Team Members
      parameters:
        - name: email
          description: "Filter by member email address."
          in: query
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  object:
                    enum: ["list"]
                    type: string
                  url: 
                    enum: ["/v1/members"]
                    type: string
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Member'
      tags:
        - Members
  /v1/events:
    get:
      operationId: List Events
      parameters:
        - name: type
          description: "Filter events by event type. For example, passing in 'task.done' will return all events of that type."
          in: query
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  object:
                    enum: ["list"]
                    type: string
                  url: 
                    enum: ["/v1/events"]
                    type: string
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Event'
      tags:
        - Events

tags:
- name: Customers
  description: "The Customer object represents the customers that you're onboarding."
- name: Plans
  description: "
    Arrows Plans are the onboarding plans shared with customers. You'll need
    three IDs to create a plan: a template ID, customer ID, and coordinator ID.
    The coordinator ID should be the ID of a team member that can be retrieved
    from the [Members](/v1/docs#tag/Members) endpoint.
  "
- name: Templates
  description: "
    Arrows Templates are blueprints for Arrows Plans. When creating a plan,
    you'll need a ID of the template you'd like to use.
  "
- name: Members
  description: "
    Arrows Members are the folks on your team helping customers get onboarded.
  "
- name: Events
  description: "
    Events are a record of something happening on your organization's Arrows
    account. There are currently two types of Events:
    \n\n
    `task.done` - Created when a task on a plan is marked as complete.
    \n\n
    `phase.done` - Created when all of the tasks in a phase are marked complete.
    \n\n
    You can filter by event type by passing in the event type as a query param.
  "
